#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Если ОсновныеНачисления.Количество() > 0 Тогда 
		
		МинимальнаяДатаНачала = НачалоМесяца(Дата);
		МаксимальнаяДатаОкончания = КонецМесяца(Дата); 
		
		Для Каждого Строка Из ОсновныеНачисления Цикл 
			
			Если  МинимальнаяДатаНачала > Строка.ДатаНачала Тогда
				МинимальнаяДатаНачала = Строка.ДатаНачала;
			КонецЕсли; 
			
			Если МаксимальнаяДатаОкончания < КонецДня(Строка.ДатаОкончания) Тогда
				МаксимальнаяДатаОкончания = КонецДня(Строка.ДатаОкончания);
			КонецЕсли;
			
		КонецЦикла;	
		
		ЕстьОтпуск = Ложь;
		СформироватьДвиженияОсновныеНачисления(Естьотпуск);
		
		ОкладРассчитан = РассчитатьОклад(МинимальнаяДатаНачала, МаксимальнаяДатаОкончания);
		
		Если Не ОкладРассчитан Тогда  
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Проведение документа отменено. Не рассчитан оклад.";
			Сообщение.Сообщить();
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
		Если ЕстьОтпуск Тогда
			
			РассчитатьОтпуск();
			
		КонецЕсли;
		
		СформироватьДополнительныеНачисления(МинимальнаяДатаНачала, МаксимальнаяДатаОкончания);
		
		СформироватьДвиженияУдержания();
		
		РассчитатьУдержания();
		
		СформироватьДвиженияВзаморасчетыССотрудниками();
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СформироватьДвиженияОсновныеНачисления(ЕстьОтпуск)
	
	Для Каждого Строка Из ОсновныеНачисления Цикл 
		
		Движение = Движения.ВКМ_ОсновныеНачисления.Добавить();
		Движение.ВидРасчета = Строка.ВидРасчета;
		Движение.ПериодДействияНачало = Строка.ДатаНачала;
		Движение.ПериодДействияКонец = КонецДня(Строка.ДатаОкончания);
		Движение.ПериодРегистрации = Дата;
		Движение.Сотрудник = Строка.Сотрудник;
		Движение.Категория = Строка.Сотрудник.Категория;
		Движение.ГрафикРаботы = Строка.ГрафикРаботы;
		
		Если Строка.ВидРасчета = ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Отпуск Тогда
			
			ЕстьОтпуск = Истина;
			Движение.БазовыйПериодНачало = НачалоМесяца(ДобавитьМесяц(Строка.ДатаНачала, -12));
			Движение.БазовыйПериодКонец = КонецМесяца(ДобавитьМесяц(Строка.ДатаНачала, -1));
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Движения.ВКМ_ОсновныеНачисления.Записать(); 	
	
КонецПроцедуры

Процедура СформироватьДополнительныеНачисления(МинимальнаяДатаНачала, МаксимальнаяДатаОкончания);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВКМ_ВыполненныеСотрудникомРаботы.Сотрудник КАК Сотрудник,
		|	ВКМ_ВыполненныеСотрудникомРаботы.Сотрудник.Категория КАК Категория,
		|	СУММА(ЕСТЬNULL(ВКМ_ВыполненныеСотрудникомРаботы.СуммаКОплате, 0)) КАК СуммаКОплате
		|ИЗ
		|	РегистрНакопления.ВКМ_ВыполненныеСотрудникомРаботы КАК ВКМ_ВыполненныеСотрудникомРаботы
		|ГДЕ
		|	ВКМ_ВыполненныеСотрудникомРаботы.Период МЕЖДУ &ДатаНачало И &ДатаОкончание
		|
		|СГРУППИРОВАТЬ ПО
		|	ВКМ_ВыполненныеСотрудникомРаботы.Сотрудник,
		|	ВКМ_ВыполненныеСотрудникомРаботы.Сотрудник.Категория";
	
	Запрос.УстановитьПараметр("ДатаНачало", МинимальнаяДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончание", МаксимальнаяДатаОкончания);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Движение = Движения.ВКМ_ДополнительныеНачисления.Добавить();
		Движение.ВидРасчета = ПланыВидовРасчета.ВКМ_ДополнительныеНачисления.ПроцентОтРабот;
        Движение.ПериодДействияНачало = МинимальнаяДатаНачала;
		Движение.ПериодДействияКонец = МаксимальнаяДатаОкончания;
		Движение.ПериодРегистрации = Дата;
		Движение.Сотрудник = ВыборкаДетальныеЗаписи.Сотрудник;
		Движение.Категория = ВыборкаДетальныеЗаписи.Категория;
		Движение.Результат = ВыборкаДетальныеЗаписи.СуммаКОплате;
		
	КонецЦикла;
	
	Движения.ВКМ_ДополнительныеНачисления.Записать(); 	
	
КонецПроцедуры

Процедура СформироватьДвиженияУдержания();

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВКМ_ОсновныеНачисления.ПериодДействияНачало КАК ПериодДействияНачало,
		|	ВКМ_ОсновныеНачисления.ПериодДействияКонец КАК ПериодДействияКонец,
		|	ВКМ_ОсновныеНачисления.Регистратор КАК Регистратор,
		|	ВКМ_ОсновныеНачисления.Сотрудник КАК Сотрудник,
		|	ВКМ_ОсновныеНачисления.Категория КАК Категория,
		|	ЕСТЬNULL(ВКМ_ОсновныеНачисления.Результат, 0) КАК ОснНачисления,
		|	ВКМ_ОсновныеНачисления.ВидРасчета КАК ВидРасчета,
		|	NULL КАК ДопНачисления
		|ИЗ
		|	РегистрРасчета.ВКМ_ОсновныеНачисления КАК ВКМ_ОсновныеНачисления
		|ГДЕ
		|	ВКМ_ОсновныеНачисления.Регистратор = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	NULL,
		|	ВКМ_ДополнительныеНачисления.Регистратор,
		|	ВКМ_ДополнительныеНачисления.Сотрудник,
		|	ВКМ_ДополнительныеНачисления.Категория,
		|	NULL,
		|	ВКМ_ДополнительныеНачисления.ВидРасчета,
		|	ВКМ_ДополнительныеНачисления.Результат
		|ИЗ
		|	РегистрРасчета.ВКМ_ДополнительныеНачисления КАК ВКМ_ДополнительныеНачисления
		|ГДЕ
		|	ВКМ_ДополнительныеНачисления.Регистратор = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Движение = Движения.ВКМ_Удержания.Добавить();
		
		Движение.ПериодДействияНачало = ВыборкаДетальныеЗаписи.ПериодДействияНачало;
		Движение.ПериодДействияКонец = ВыборкаДетальныеЗаписи.ПериодДействияКонец;
		Движение.ПериодРегистрации = Дата;
		Движение.Сотрудник = ВыборкаДетальныеЗаписи.Сотрудник;
		Движение.Категория = ВыборкаДетальныеЗаписи.Категория;
		
		Если ВыборкаДетальныеЗаписи.ВидРасчета = ПланыВидовРасчета.ВКМ_ДополнительныеНачисления.ПроцентОтРабот Тогда
			Движение.ВидРасчета = ПланыВидовРасчета.ВКМ_Удержания.НДФЛПроцентОтРабот;
		Иначе
			Если ВыборкаДетальныеЗаписи.ВидРасчета = ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Оклад Тогда
				Движение.ВидРасчета = ПланыВидовРасчета.ВКМ_Удержания.НДФЛОклад;
			Иначе
				Движение.ВидРасчета = ПланыВидовРасчета.ВКМ_Удержания.НДФЛОтпуск;
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	
	Движения.ВКМ_Удержания.Записать(); 	
	
КонецПроцедуры

Процедура СформироватьДвиженияВзаморасчетыССотрудниками()

	Движения.ВКМ_ВзаиморасчетыССотрудниками.Записывать = Истина;
	Движения.ВКМ_ВзаиморасчетыССотрудниками.Записать();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВКМ_Удержания.Сотрудник КАК Сотрудник,
		|	СУММА(ЕСТЬNULL(ВКМ_Удержания.Результат, 0)) КАК СуммаУдержания
		|ПОМЕСТИТЬ ВТ_Удержания
		|ИЗ
		|	РегистрРасчета.ВКМ_Удержания КАК ВКМ_Удержания
		|ГДЕ
		|	ВКМ_Удержания.Регистратор = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВКМ_Удержания.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВКМ_ОсновныеНачисления.Сотрудник КАК Сотрудник,
		|	СУММА(ЕСТЬNULL(ВКМ_ОсновныеНачисления.Результат, 0)) КАК СуммаОснНачисления
		|ПОМЕСТИТЬ ВТ_ОснНачисления
		|ИЗ
		|	РегистрРасчета.ВКМ_ОсновныеНачисления КАК ВКМ_ОсновныеНачисления
		|ГДЕ
		|	ВКМ_ОсновныеНачисления.Регистратор = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВКМ_ОсновныеНачисления.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВКМ_ДополнительныеНачисления.Сотрудник КАК Сотрудник,
		|	СУММА(ЕСТЬNULL(ВКМ_ДополнительныеНачисления.Результат, 0)) КАК СуммаДоНачисления
		|ПОМЕСТИТЬ ВТ_ДопНачисления
		|ИЗ
		|	РегистрРасчета.ВКМ_ДополнительныеНачисления КАК ВКМ_ДополнительныеНачисления
		|ГДЕ
		|	ВКМ_ДополнительныеНачисления.Регистратор = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВКМ_ДополнительныеНачисления.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Удержания.Сотрудник КАК Сотрудник,
		|	ВТ_ОснНачисления.СуммаОснНачисления КАК СуммаОснНачисления,
		|	ВТ_ДопНачисления.СуммаДоНачисления КАК СуммаДоНачисления,
		|	ВТ_Удержания.СуммаУдержания КАК СуммаУдержания,
		|	ЕСТЬNULL(ВТ_ОснНачисления.СуммаОснНачисления, 0) + ЕСТЬNULL(ВТ_ДопНачисления.СуммаДоНачисления, 0) - ЕСТЬNULL(ВТ_Удержания.СуммаУдержания, 0) КАК Сумма
		|ИЗ
		|	ВТ_Удержания КАК ВТ_Удержания
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОснНачисления КАК ВТ_ОснНачисления
		|		ПО ВТ_Удержания.Сотрудник = ВТ_ОснНачисления.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДопНачисления КАК ВТ_ДопНачисления
		|		ПО ВТ_Удержания.Сотрудник = ВТ_ДопНачисления.Сотрудник";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Движение = Движения.ВКМ_ВзаиморасчетыССотрудниками.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период = Дата;
		ЗаполнитьЗначенияСвойств(Движение, ВыборкаДетальныеЗаписи);		
		
	КонецЦикла;
	
КонецПроцедуры

Функция РассчитатьОклад(МинимальнаяДатаНачала, МаксимальнаяДатаОкончания) 

	ОкладРассчитан = Истина;
	
	Запрос = Новый Запрос; 
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВКМ_ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
		|	ВКМ_ОсновныеНачисления.Сотрудник КАК Сотрудник,
		|	ВКМ_ОсновныеНачисления.Категория КАК Категория,
		|	ВКМ_ОсновныеНачисления.ГрафикРаботы КАК ГрафикРаботы,
		|	ВКМ_ОсновныеНачисления.ВидРасчета КАК ВидРасчета,
		|	ЕСТЬNULL(ВКМ_ОсновныеНачисленияДанныеГрафика.РабочихДнейПериодДействия, 0) КАК НормаДней,
		|	ЕСТЬNULL(ВКМ_ОсновныеНачисленияДанныеГрафика.РабочихДнейФактическийПериодДействия, 0) КАК ФактДней
		|ПОМЕСТИТЬ ВТ_ДанныеГрафика
		|ИЗ
		|	РегистрРасчета.ВКМ_ОсновныеНачисления КАК ВКМ_ОсновныеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ВКМ_ОсновныеНачисления.ДанныеГрафика(Регистратор = &Ссылка) КАК ВКМ_ОсновныеНачисленияДанныеГрафика
		|		ПО ВКМ_ОсновныеНачисления.НомерСтроки = ВКМ_ОсновныеНачисленияДанныеГрафика.НомерСтроки
		|ГДЕ
		|	ВКМ_ОсновныеНачисления.Регистратор = &Ссылка
		|	И ВКМ_ОсновныеНачисления.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ВКМ_ОсновныеНачисления.Оклад)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеГрафика.НомерСтроки КАК НомерСтроки,
		|	ВТ_ДанныеГрафика.Сотрудник.Представление КАК СотрудникПредставление,
		|	ВТ_ДанныеГрафика.Сотрудник КАК Сотрудник,
		|	ВТ_ДанныеГрафика.ГрафикРаботы КАК ГрафикРаботы,
		|	ЕСТЬNULL(ВКМ_УсловияОплатыСотрудниковСрезПоследних.Оклад, 0) КАК Показатель,
		|	ВТ_ДанныеГрафика.НормаДней КАК НормаДней,
		|	ВТ_ДанныеГрафика.ФактДней КАК ФактДней,
		|	ВТ_ДанныеГрафика.Сотрудник.Представление КАК СотрудникП,
		|	ВЫБОР
		|		КОГДА ВТ_ДанныеГрафика.НормаДней > 0
		|			ТОГДА ЕСТЬNULL(ВКМ_УсловияОплатыСотрудниковСрезПоследних.Оклад, 0) * ВТ_ДанныеГрафика.ФактДней / ВТ_ДанныеГрафика.НормаДней
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Результат
		|ИЗ
		|	ВТ_ДанныеГрафика КАК ВТ_ДанныеГрафика
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВКМ_УсловияОплатыСотрудников.СрезПоследних КАК ВКМ_УсловияОплатыСотрудниковСрезПоследних
		|		ПО ВТ_ДанныеГрафика.Сотрудник = ВКМ_УсловияОплатыСотрудниковСрезПоследних.Сотрудник";

	
	Запрос.УстановитьПараметр("Ссылка",Ссылка); 
	Запрос.УстановитьПараметр("НачалоПериода", МинимальнаяДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", МаксимальнаяДатаОкончания);  
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл  
		
		Если Выборка.Показатель = 0 Тогда 
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтрШаблон("Для сотрудника %1 не установлен оклад", Выборка.СотрудникП);
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Поле = СтрШаблон("ОсновныеНачисления[%1].Сотрудник", XMLСтрока(Выборка.НомерСтроки - 1));
			Сообщение.Сообщить();
			
			ОкладРассчитан = Ложь; 
			Продолжить;
			
		КонецЕсли;
		
		Движение = Движения.ВКМ_ОсновныеНачисления[Выборка.НомерСтроки -1]; 
		ЗаполнитьЗначенияСвойств(Движение, Выборка, "ФактДней,НормаДней,Показатель,Результат");
		
	КонецЦикла;
	
	Если ОкладРассчитан Тогда
		Движения.ВКМ_ОсновныеНачисления.Записать(, Истина);
	КонецЕсли;
	
	Возврат ОкладРассчитан; 
	
КонецФункции

Процедура РассчитатьОтпуск()
	
	ДатаНачала = НачалоМесяца(ДобавитьМесяц(Дата, -12));
	ДатаОкончания = КонецМесяца(ДобавитьМесяц(Дата, -1));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ОсновныеНачисленияБаза.РезультатБаза, 0) КАК БазаОсн,
		|	ЕСТЬNULL(ОсновныеНачисленияБаза.НормаДнейБаза, 0) КАК Норма,
		|	ЕСТЬNULL(ОсновныеНачисленияБаза.ФактДнейБаза, 0) КАК Факт,
		|	ОсновныеНачисления.ПериодДействияКонец КАК ПериодДействияКонец,
		|	ОсновныеНачисления.ПериодДействияНачало КАК ПериодДействияНачало,
		|	ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
		|	ОсновныеНачисления.Сотрудник КАК Сотрудник,
		|	ОсновныеНачисления.Категория КАК Категория,
		|	ОсновныеНачисления.ГрафикРаботы КАК ГрафикРаботы,
		|	ЕСТЬNULL(ДополнительныеНачисленияБаза.РезультатБаза, 0) КАК БазаДоп,
		|	СУММА(ЕСТЬNULL(ГрафикиРаботы.РабочихДней, 0)) КАК РабочиеДни
		|ИЗ
		|	РегистрРасчета.ВКМ_ОсновныеНачисления КАК ОсновныеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ВКМ_ОсновныеНачисления.БазаВКМ_ОсновныеНачисления(
		|				&Измерения,
		|				&Измерения,
		|				,
		|				БазовыйПериодКонец <= &ДатаОкончания
		|					И БазовыйПериодНачало >= &ДатаНачала) КАК ОсновныеНачисленияБаза
		|		ПО ОсновныеНачисления.Сотрудник = ОсновныеНачисленияБаза.Сотрудник
		|			И ОсновныеНачисления.Категория = ОсновныеНачисленияБаза.Категория
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ВКМ_ДополнительныеНачисления.БазаВКМ_ДополнительныеНачисления(
		|				&Измерения,
		|				&Измерения,
		|				,
		|				БазовыйПериодКонец <= &ДатаОкончания
		|					И БазовыйПериодНачало >= &ДатаНачала) КАК ДополнительныеНачисленияБаза
		|		ПО ОсновныеНачисления.Сотрудник = ДополнительныеНачисленияБаза.Сотрудник
		|			И ОсновныеНачисления.Категория = ДополнительныеНачисленияБаза.Категория
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВКМ_ГрафикиРаботы КАК ГрафикиРаботы
		|		ПО ОсновныеНачисления.ГрафикРаботы = ГрафикиРаботы.ГрафикРаботы
		|ГДЕ
		|	ОсновныеНачисления.Регистратор = &Ссылка
		|	И ОсновныеНачисления.ВидРасчета = &Отпуск
		|	И ГрафикиРаботы.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|
		|СГРУППИРОВАТЬ ПО
		|	ОсновныеНачисления.ПериодДействияКонец,
		|	ОсновныеНачисления.ПериодДействияНачало,
		|	ОсновныеНачисления.НомерСтроки,
		|	ОсновныеНачисления.Сотрудник,
		|	ОсновныеНачисления.Категория,
		|	ОсновныеНачисления.ГрафикРаботы,
		|	ЕСТЬNULL(ОсновныеНачисленияБаза.РезультатБаза, 0),
		|	ЕСТЬNULL(ОсновныеНачисленияБаза.НормаДнейБаза, 0),
		|	ЕСТЬNULL(ОсновныеНачисленияБаза.ФактДнейБаза, 0),
		|	ЕСТЬNULL(ДополнительныеНачисленияБаза.РезультатБаза, 0)";
		
	Измерения = Новый Массив;
	Измерения.Добавить("Сотрудник");
	Измерения.Добавить("Категория");
	
	Запрос.УстановитьПараметр("Измерения", Измерения);
	Запрос.УстановитьПараметр("Отпуск", ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Отпуск);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);

	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ДниВОтпуске = (ВыборкаДетальныеЗаписи.ПериодДействияКонец + 1 - ВыборкаДетальныеЗаписи.ПериодДействияНачало) / 86400;
		Движение = Движения.ВКМ_ОсновныеНачисления[ВыборкаДетальныеЗаписи.НомерСтроки - 1];
		
		Если ВыборкаДетальныеЗаписи.Норма = 0 Тогда
			
			Движение.Результат = 0;
			Продолжить;
			
		КонецЕсли;
		
		Движение.НормаДней = ВыборкаДетальныеЗаписи.Норма;
		Движение.ФактДней = ВыборкаДетальныеЗаписи.Факт;

		Сумма = (ВыборкаДетальныеЗаписи.БазаОсн + ВыборкаДетальныеЗаписи.БазаДоп) / ВыборкаДетальныеЗаписи.РабочиеДни;				
		
		Движение.Показатель = Сумма;
		
		Движение.Результат = ДниВОтпуске * Движение.Показатель;
		
	КонецЦикла;

	Движения.ВКМ_ОсновныеНачисления.Записать(, Истина);
	
КонецПроцедуры

Процедура РассчитатьУдержания()
	
	ДатаНачала = НачалоМесяца(Дата);
	ДатаОкончания = КонецМесяца(Дата);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ЕСТЬNULL(ВКМ_ОсновныеНачисления.Результат, 0)) КАК ОснНачисления,
		|	ВКМ_ОсновныеНачисления.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	РегистрРасчета.ВКМ_ОсновныеНачисления КАК ВКМ_ОсновныеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ВКМ_Удержания КАК ВКМ_Удержания
		|		ПО ВКМ_ОсновныеНачисления.Сотрудник = ВКМ_Удержания.Сотрудник
		|			И ВКМ_ОсновныеНачисления.Категория = ВКМ_Удержания.Категория
		|ГДЕ
		|	ВКМ_ОсновныеНачисления.Регистратор = &Ссылка
		|	И ВКМ_Удержания.Регистратор = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВКМ_ОсновныеНачисления.НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	НомерСтроки = 0;	
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Движение = Движения.ВКМ_Удержания[НомерСтроки];
		
		Движение.Результат = ВыборкаДетальныеЗаписи.ОснНачисления * 0.13;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ЕСТЬNULL(ВКМ_ДополнительныеНачисления.Результат, 0)) КАК ДопНачисления,
		|	ВКМ_ДополнительныеНачисления.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	РегистрРасчета.ВКМ_ДополнительныеНачисления КАК ВКМ_ДополнительныеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ВКМ_Удержания КАК ВКМ_Удержания
		|		ПО ВКМ_ДополнительныеНачисления.Сотрудник = ВКМ_Удержания.Сотрудник
		|			И ВКМ_ДополнительныеНачисления.Категория = ВКМ_Удержания.Категория
		|ГДЕ
		|	ВКМ_ДополнительныеНачисления.Регистратор = &Ссылка
		|	И ВКМ_Удержания.Регистратор = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВКМ_ДополнительныеНачисления.НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Движение = Движения.ВКМ_Удержания[НомерСтроки];
		
		Движение.Результат = ВыборкаДетальныеЗаписи.ДопНачисления * 0.13;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	Движения.ВКМ_Удержания.Записать(, Истина);

КонецПроцедуры

#КонецОбласти